import socket
import dns.resolver
from datetime import datetime
import sys
import re
import concurrent.futures

def scan_port(ip, port, timeout=1):
    scanner = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    scanner.settimeout(timeout)
    try:
        scanner.connect((ip, port))
        try:
            service = socket.getservbyport(port)
        except:
            service = "Unknown service"
        
    
        try:
            scanner.send(b'HEAD / HTTP/1.1\r\nHost: ' + ip.encode() + b'\r\n\r\n')
            banner = scanner.recv(1024).decode().strip()
        except:
            banner = "No banner"

        return port, True, service, banner
    except (socket.timeout, ConnectionRefusedError):
        return port, False, None, None
    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        return port, False, None, None
    finally:
        scanner.close()

def check_vulnerabilities(port, service):
    vulnerabilities = {
        80: "Possible HTTP vulnerability",
        22: "Possible SSH vulnerability",
        3306: "Possible MySQL vulnerability",
    }
    return vulnerabilities.get(port, "No known vulnerabilities")

def resolve_dns(ip):
    try:
        result = dns.resolver.resolve(dns.reversename.from_address(ip), "PTR")
        return str(result[0])
    except Exception as e:
        return f"DNS resolution failed: {e}"

def analyze_banner(banner):
    known_patterns = {
        "Apache": "Apache HTTP Server",
        "nginx": "Nginx Web Server",
        "ngrok": "Ngrok Service",
        # Add more known patterns here
    }
    for pattern, service in known_patterns.items():
        if re.search(pattern, banner, re.IGNORECASE):
            return service
    return "Unknown service"

def run_scanner(target, start_port, end_port, timeout=1):
    print(f"Scanning target {target}")
    print(f"Scanning started at {str(datetime.now())}")
    
    # Resolve DNS
    dns_info = resolve_dns(target)
    print(f"DNS Information: {dns_info}")

    with open("scan_results.txt", "w") as log_file:
        for port in range(start_port, end_port + 1):
            port, status, service, banner = scan_port(target, port, timeout)
            if status:
                service_fingerprint = analyze_banner(banner)
                vulnerability_info = check_vulnerabilities(port, service)
                result = f"Port {port}: Open ({service}) - Banner: {banner} - Service Fingerprint: {service_fingerprint} - {vulnerability_info}"
                print(result)
                log_file.write(result + "\n")
            else:
                result = f"Port {port}: Closed"
                print(result)
                log_file.write(result + "\n")
    
    print(f"Scanning finished at {str(datetime.now())}")

if __name__ == "__main__":
    try:
        target = input("Enter the target IP address: ")
        start_port = int(input("Enter the starting port number: "))
        end_port = int(input("Enter the ending port number: "))
        timeout = int(input("Enter the timeout value (seconds): "))
        run_scanner(target, start_port, end_port, timeout)
    except ValueError as e:
        print(f"Invalid input: {e}", file=sys.stderr)
